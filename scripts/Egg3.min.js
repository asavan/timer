"use strict";
(function () {

    function int(a) {
        return Math.floor(a)
    }
    var Time = {
        MILLISECONDS: 1,
        SECONDS: 1e3,
        MINUTES: 6e4,
        HOURS: 36e5,
        DAYS: 864e5,
        daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        totalYears: 0,
        remainingYears: 0,
        totalMonths: 0,
        remainingMonths: 0,
        totalDays: 0,
        remainingDays: 0,
        totalHours: 0,
        remainingHours: 0,
        totalMinutes: 0,
        remainingMinutes: 0,
        totalSeconds: 0,
        remainingSeconds: 0,
        totalMilliseconds: 0,
        remainingMilliseconds: 0,
        calcTime: function(startDate, endDate) {
            var c = endDate.getTime() - startDate.getTime();
            Time.totalMilliseconds = c / Time.MILLISECONDS, Time.totalSeconds = c / Time.SECONDS, Time.totalMinutes = c / Time.MINUTES, Time.totalHours = c / Time.HOURS, Time.totalDays = c / Time.DAYS, Time.totalMonths = Time.calcTotalMonths(Time.totalDays, startDate), Time.totalYears = Time.totalMonths / 12, Time.remainingYears = int(Time.totalYears), Time.remainingMonths = int(Time.totalMonths - 12 * Time.remainingYears), Time.remainingDays = int(Time.totalDays - Time.getDaysFromMonths(startDate, Time.totalMonths)), Time.remainingHours = int(Time.totalHours - 24 * int(Time.totalDays)), Time.remainingMinutes = int(Time.totalMinutes - 60 * int(Time.totalHours)), Time.remainingSeconds = int(Time.totalSeconds - 60 * int(Time.totalMinutes)), Time.remainingMilliseconds = int(Time.totalMilliseconds - 1e3 * int(Time.totalSeconds))
        },
        isLeapYear: function(a) {
            return a > 0 && !(a % 4) && (a % 100 || !(a % 400))
        },
        calcTotalMonths: function(a, b) {
            for (var c = b.getMonth(), d = b.getFullYear(), e = c, f = d, g = 0; a > Time.daysInMonth[e];) a -= Time.daysInMonth[e], 2 == e && Time.isLeapYear(f) && (a -= 1), e++, 12 == e && (e = 0, f++), g++;
            var h = a / Time.daysInMonth[e];
            return g + h
        },
        getDaysFromMonths: function(a, b) {
            b = int(b);
            for (var c = a.getMonth(), d = a.getFullYear(), e = c, f = d, g = 0, h = 0; b > h; h++) g += Time.daysInMonth[e], 2 == e && Time.isLeapYear(f) && (g += 1), e++, 12 == e && (e = 0, f++);
            return g
        }
    };


    const START = "start",
    RESTART = "restart",
    START_PAUSE = "start_pause",
    PAUSE = "pause",
    NONE = "";


function Start(event) {
    if (Egg.started) {
        return;
    }
    Egg.started = true;
    Egg.start();
    Egg.startButton.classList.add('hidden');
    // document.body.removeEventListener('click', Start, false);
};

function onKeyPress(e) {
    // e.preventDefault();
    const keyKodeToDirection = function (keyCode) {
        switch (keyCode) {
            case 13: // enter
                return START;
            case 82: // 'r'
                return RESTART;
            case 75: // 'k'
                return PAUSE;
            case 32: // ' '
                return START_PAUSE;
            default:
                return keyCode;
        }
    };
    const code = keyKodeToDirection(e.keyCode);
    console.log(code);
    if (code === START) {
        Start();
    } else if (code === RESTART) {
        Egg.started = false;
        Start();
    } else if (code === START_PAUSE) {
        if (!Egg.started) {
            Start();
        } else {
            Egg.pause();
        }
    }
}

var Egg = {
    name: "EggTimer",
    defaultText: "",
    expiredMessage: "",
    title: "",
    label: "",
    progress: 0,
    startTime: 0,
    endTime: 0,
    totalTime: 0,
    parseError: "",
    progressBar: null,
    progressText: null,
    staticArea: null,
    beep: null,
    currDate: null,
    endDate: null,
    ticker: null,
    startButton: null,
    volume: 1,
    started: false,
    blink: false,
    sequence: [],
    canAlert: true,
    start: function () {
        if (Egg.sequence.length === 0) {
            Egg.initializeTimer2("Expired!")
        } else {
            var first = Egg.sequence.shift();
            Egg.initializeTimer(0, first.duration * 1e3, first.label)
        }
    },
    initializeTimer: function (startTime, endTime, label) {
        Egg.endTime = endTime;
        Egg.startTime = startTime;
        Egg.label = label;
        Egg.totalTime = Egg.endTime - Egg.startTime;
        Egg.endDate = new Date((new Date).getTime() + Egg.totalTime);
        Egg.currDate = new Date;
        Egg.expiredMessage = Egg.expiredMessage || "Time Expired" + (label ? ": " : "!") + label;
        Egg.update();
        if (!Egg.ticker) {
            Egg.ticker = setInterval(Egg.update, 1e3 / 4)
        }
    },
    initializeTimer2: function (label) {
        Egg.endDate = new Date((new Date).getTime() + Egg.totalTime);
        Egg.currDate = new Date;
        Egg.expiredMessage = label || Egg.expiredMessage;
        Egg.progressBar.classList.add('active');
        Egg.update();
        if (!Egg.ticker) {
            Egg.ticker = setInterval(Egg.update, 1e3 / 4)
        }
    },
    update: function () {
        Time.calcTime(new Date(), Egg.endDate);
        Egg.updateParts(Time)
    },
    updateParts: function (Time) {
        if (Time.totalSeconds < 0) {
            Egg.onTimeComplete();
            return
        }
        var clockTime = [];
        var yearText, monthText, dayText, hourText, minText, secText;
        yearText = monthText = dayText = hourText = minText = secText = "";
        if (Time.remainingHours > 0) {
            clockTime.push(padTimeText(Time.remainingHours) + "h");
            hourText = getTimeText(Time.remainingHours, "hour")
        }
        if (Time.remainingMinutes >= 0) {
            clockTime.push(Time.remainingMinutes);
            minText = getTimeText(Time.remainingMinutes, "minute")
        } else {
            clockTime.push(padTimeText(0))
        }
        if (Time.remainingSeconds > 0) {
            clockTime.push(padTimeText(Time.remainingSeconds));
            secText = getTimeText(Time.remainingSeconds, "second")
        } else {
            clockTime.push(padTimeText(0))
        }
        var slabel = Egg.label && Egg.label != "" ? Egg.label + "<br />" : "";
        var timeText = slabel + yearText + monthText + dayText + hourText + minText + secText;

        let separator = Egg.blink ? "." : ":" ;
        Egg.blink = !Egg.blink;
        let title = clockTime.join(separator) + (Egg.label && Egg.label !== "" ? " : " + Egg.label : "");
        Egg.updateTitle(title);
        Egg.updateText(title);
        Egg.progress = (Egg.totalTime - Time.totalMilliseconds) / Egg.totalTime;
        Egg.updateProgressBar();
        // Egg.currDate = new Date
    },
    updateTitle: function (title) {
        document.title = title;
    },
    updateProgressBar: function () {
    },
    updateText: function (text) {
        if (text) Egg.progressText.innerText = text;
    },
    onTimeComplete: function () {
        var beepFinishedPromise = null;
        Egg.progress = 1;
        Egg.updateProgressBar();
        if (Egg.beep && Egg.beep.play) {
            Egg.beep.volume = Egg.volume;
            beepFinishedPromise = Egg.beep.play()
        }
        if (Egg.sequence.length === 0) {
            clearInterval(Egg.ticker);
            Egg.ticker = null;
            Egg.updateTitle(Egg.expiredMessage);
            // Egg.updateText(Egg.expiredMessage);
            Egg.progressText.innerHTML =  "&#x1F570;"
            Egg.started = false;
            if (beepFinishedPromise && typeof beepFinishedPromise.then === "function") {
                beepFinishedPromise.then(function () {
                    console.log("finished");
                });
            } else {
                Egg.showAlert()
            }
        } else {
            var next = Egg.sequence.shift();
            Egg.initializeTimer(0, next.duration * 1e3, next.label)
        }
    },
    showAlert: function () {
        if (Egg.canAlert) {
            setTimeout(function () {
                alert(Egg.expiredMessage);
            }, 300);
        }
    }
};

function getSModifier(value) {
    var mod;
    if (value == 0) {
        mod = ""
    } else if (value == 1) {
        mod = " "
    } else {
        mod = "s "
    }
    return mod
}

function padTimeText(value) {
    return value < 10 ? "0" + value : "" + value
}

function getTimeText(time, label) {
    var timeText = "";
    if (time > 0) {
        timeText = time + " " + label + getSModifier(time);
    }
    return timeText;
}

function init() {
    var hash = window.location.href.split('#')[1] || 4;
    Egg.totalTime = hash * 60000;
    Egg.progressBar = document.querySelector("#progress");
    Egg.progressText = document.querySelector("#progressText");
    Egg.startButton = document.querySelector("#tapButton");
    Egg.beep = document.getElementById("beepbeep");
    Egg.progressBar.style.transitionDuration = (Egg.totalTime/1000) + "s";
    document.body.addEventListener('click', Start, false);
    window.addEventListener('keydown', onKeyPress);
    Egg.endDate = new Date((new Date).getTime() + Egg.totalTime);
    Egg.update();

    if (Egg.beep && Egg.beep.load) {
        Egg.beep.load();
    }

};

if( document.readyState !== 'loading' ) {
    init();
} else {
    document.addEventListener("DOMContentLoaded", function (event) {
        init();
    });
}
})();
